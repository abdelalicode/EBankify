/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { Bank } from '../models/bank';
import { createBank } from '../fn/bank-controller/create-bank';
import { CreateBank$Params } from '../fn/bank-controller/create-bank';
import { findById } from '../fn/bank-controller/find-by-id';
import { FindById$Params } from '../fn/bank-controller/find-by-id';
import { getAllBanks } from '../fn/bank-controller/get-all-banks';
import { GetAllBanks$Params } from '../fn/bank-controller/get-all-banks';
import { updateBank } from '../fn/bank-controller/update-bank';
import { UpdateBank$Params } from '../fn/bank-controller/update-bank';

@Injectable({ providedIn: 'root' })
export class BankControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `findById()` */
  static readonly FindByIdPath = '/banks/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findById()` instead.
   *
   * This method doesn't expect any request body.
   */
  findById$Response(params: FindById$Params, context?: HttpContext): Observable<StrictHttpResponse<Bank>> {
    return findById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findById(params: FindById$Params, context?: HttpContext): Observable<Bank> {
    return this.findById$Response(params, context).pipe(
      map((r: StrictHttpResponse<Bank>): Bank => r.body)
    );
  }

  /** Path part for operation `updateBank()` */
  static readonly UpdateBankPath = '/banks/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateBank()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateBank$Response(params: UpdateBank$Params, context?: HttpContext): Observable<StrictHttpResponse<Bank>> {
    return updateBank(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateBank$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateBank(params: UpdateBank$Params, context?: HttpContext): Observable<Bank> {
    return this.updateBank$Response(params, context).pipe(
      map((r: StrictHttpResponse<Bank>): Bank => r.body)
    );
  }

  /** Path part for operation `getAllBanks()` */
  static readonly GetAllBanksPath = '/banks';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllBanks()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllBanks$Response(params?: GetAllBanks$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Bank>>> {
    return getAllBanks(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllBanks$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllBanks(params?: GetAllBanks$Params, context?: HttpContext): Observable<Array<Bank>> {
    return this.getAllBanks$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Bank>>): Array<Bank> => r.body)
    );
  }

  /** Path part for operation `createBank()` */
  static readonly CreateBankPath = '/banks';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createBank()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createBank$Response(params: CreateBank$Params, context?: HttpContext): Observable<StrictHttpResponse<Bank>> {
    return createBank(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createBank$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createBank(params: CreateBank$Params, context?: HttpContext): Observable<Bank> {
    return this.createBank$Response(params, context).pipe(
      map((r: StrictHttpResponse<Bank>): Bank => r.body)
    );
  }

}
