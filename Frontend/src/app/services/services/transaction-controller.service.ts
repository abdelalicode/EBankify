/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { approveTransaction } from '../fn/transaction-controller/approve-transaction';
import { ApproveTransaction$Params } from '../fn/transaction-controller/approve-transaction';
import { getAllBankAccounts } from '../fn/transaction-controller/get-all-bank-accounts';
import { GetAllBankAccounts$Params } from '../fn/transaction-controller/get-all-bank-accounts';
import { makeTransaction } from '../fn/transaction-controller/make-transaction';
import { MakeTransaction$Params } from '../fn/transaction-controller/make-transaction';

@Injectable({ providedIn: 'root' })
export class TransactionControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `approveTransaction()` */
  static readonly ApproveTransactionPath = '/transactions/approve';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `approveTransaction()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  approveTransaction$Response(params: ApproveTransaction$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return approveTransaction(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `approveTransaction$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  approveTransaction(params: ApproveTransaction$Params, context?: HttpContext): Observable<{
}> {
    return this.approveTransaction$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getAllBankAccounts()` */
  static readonly GetAllBankAccountsPath = '/transactions';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllBankAccounts()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllBankAccounts$Response(params?: GetAllBankAccounts$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getAllBankAccounts(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllBankAccounts$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllBankAccounts(params?: GetAllBankAccounts$Params, context?: HttpContext): Observable<{
}> {
    return this.getAllBankAccounts$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `makeTransaction()` */
  static readonly MakeTransactionPath = '/transactions';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `makeTransaction()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  makeTransaction$Response(params: MakeTransaction$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return makeTransaction(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `makeTransaction$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  makeTransaction(params: MakeTransaction$Params, context?: HttpContext): Observable<{
}> {
    return this.makeTransaction$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}
