/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { BankAccountDto } from '../models/bank-account-dto';
import { createBankAccount } from '../fn/bank-account-controller/create-bank-account';
import { CreateBankAccount$Params } from '../fn/bank-account-controller/create-bank-account';
import { findById1 } from '../fn/bank-account-controller/find-by-id-1';
import { FindById1$Params } from '../fn/bank-account-controller/find-by-id-1';
import { getAllBankAccounts1 } from '../fn/bank-account-controller/get-all-bank-accounts-1';
import { GetAllBankAccounts1$Params } from '../fn/bank-account-controller/get-all-bank-accounts-1';
import { updateBankAccount } from '../fn/bank-account-controller/update-bank-account';
import { UpdateBankAccount$Params } from '../fn/bank-account-controller/update-bank-account';

@Injectable({ providedIn: 'root' })
export class BankAccountControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `findById1()` */
  static readonly FindById1Path = '/bankaccounts/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findById1()` instead.
   *
   * This method doesn't expect any request body.
   */
  findById1$Response(params: FindById1$Params, context?: HttpContext): Observable<StrictHttpResponse<BankAccountDto>> {
    return findById1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findById1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findById1(params: FindById1$Params, context?: HttpContext): Observable<BankAccountDto> {
    return this.findById1$Response(params, context).pipe(
      map((r: StrictHttpResponse<BankAccountDto>): BankAccountDto => r.body)
    );
  }

  /** Path part for operation `updateBankAccount()` */
  static readonly UpdateBankAccountPath = '/bankaccounts/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateBankAccount()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateBankAccount$Response(params: UpdateBankAccount$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return updateBankAccount(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateBankAccount$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateBankAccount(params: UpdateBankAccount$Params, context?: HttpContext): Observable<{
}> {
    return this.updateBankAccount$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `getAllBankAccounts1()` */
  static readonly GetAllBankAccounts1Path = '/bankaccounts';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllBankAccounts1()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllBankAccounts1$Response(params?: GetAllBankAccounts1$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return getAllBankAccounts1(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllBankAccounts1$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllBankAccounts1(params?: GetAllBankAccounts1$Params, context?: HttpContext): Observable<{
}> {
    return this.getAllBankAccounts1$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

  /** Path part for operation `createBankAccount()` */
  static readonly CreateBankAccountPath = '/bankaccounts';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createBankAccount()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createBankAccount$Response(params: CreateBankAccount$Params, context?: HttpContext): Observable<StrictHttpResponse<{
}>> {
    return createBankAccount(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createBankAccount$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createBankAccount(params: CreateBankAccount$Params, context?: HttpContext): Observable<{
}> {
    return this.createBankAccount$Response(params, context).pipe(
      map((r: StrictHttpResponse<{
}>): {
} => r.body)
    );
  }

}
